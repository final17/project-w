plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
    id "org.sonarqube" version "5.1.0.4882"
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'com.opencsv', name: 'opencsv', version: '3.7'

    //slack api
    implementation 'com.slack.api:slack-api-client:1.27.2'
    //jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
//    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    // queryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    //jsoup
    implementation 'org.jsoup:jsoup:1.15.3'


    // redisson
    implementation group: 'org.redisson', name: 'redisson', version: '3.37.0'

    // AWS S3 SDK
    implementation 'software.amazon.awssdk:s3:2.20.0'

    implementation 'co.elastic.clients:elasticsearch-java:8.15.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.0'
    implementation 'jakarta.json:jakarta.json-api:2.0.1'

    // S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    runtimeOnly 'com.h2database:h2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


/*----------- sonar, jacoco -----------*/
def Qdomains = []
for (qPattern in '**/QA'..'**/QZ') {
    Qdomains.add(qPattern + '*')
}
def jacocoExcludePatterns = [
        // 측정 안하고 싶은 패턴
        "**/*Application*",
        "**/*Config*",
        "**/*Aop*",
        "**/*Exception*",
        "**/*Request*",
        "**/*Response*",
        "**/*Interceptor*",
        "**/*Filter*",
        "**/*Resolver*",
        "**/test/**",
        "**/resources/**",
        "**/entity/**",
        "**/dto/**",
        "**/security/**",
        "**/common/**",
        "**/controller/**"
]

sonar {
    properties {
        property "sonar.projectKey", "final17_project-w"
        property "sonar.organization", "final17"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.sources", "src/main/java"
        property 'sonar.exclusions', jacocoExcludePatterns.join(",") // 제외
        property "sonar.tests", "src/test/java"
        property 'sonar.language', 'java'
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.test.exclusions', jacocoExcludePatterns.join(",")
        property 'sonar.test.inclusions', '**/*Test.java'
        property 'sonar.coveragePlugin', 'jacoco'
        property 'sonar.coverage.jacoco.xmlReportPaths', "build/reports/jacoco/test/jacocoTestReport.xml"
    }
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    dependsOn test	// 테스트가 수행되어야만 report를 생성할 수 있도록 설정
    reports {
        html.required.set(true)
        xml.required.set(true)
        csv.required.set(false)
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: jacocoExcludePatterns + Qdomains) // Querydsl 관련 제거
                })
        )
    }
 //   finalizedBy jacocoTestCoverageVerification
}

//jacocoTestCoverageVerification {
//    violationRules {
////        rule {
////            // 'element'가 없으면 프로젝트의 전체 파일을 합친 값을 기준으로 합니다.
////            // 위의 리포트에서 'Total'로 표시된 부분입니다.
////            limit {
////                // 'counter'를 지정하지 않으면 default는 'INSTRUCTION'
////                // 'value'를 지정하지 않으면 default는 'COVEREDRATIO'
////                minimum = 0.30
////            }
////        }
//
//        // 여러 룰을 생성할 수 있습니다.
//        rule {
//            // 룰을 간단히 켜고 끌 수 있습니다.
//            enabled = true
//
//            // 룰을 체크할 단위는 클래스 단위
//            element = 'CLASS'
//
//            // 브랜치 커버리지를 최소한 90% 만족시켜야 합니다.
////            limit {
////                counter = 'BRANCH'
////                value = 'COVEREDRATIO'
////                minimum = 0.30
////            }
//
//            // 라인 커버리지를 최소한 80% 만족시켜야 합니다.
//            limit {
//                counter = 'LINE'
//                value = 'COVEREDRATIO'
//                minimum = 0.30
//            }
//
//            // 빈 줄을 제외한 코드의 라인수를 최대 200라인으로 제한합니다.
//            limit {
//                counter = 'LINE'
//                value = 'TOTALCOUNT'
//                maximum = 200
//            }
//
//            excludes = jacocoExcludePatterns + QDomains
//        }
//    }
//}
